/*
  AI Compliance Chat Widget â€“ embeddable version 1.0
  --------------------------------------------------
  Drop this file on any public URL (e.g. https://cdn.example.com/chat-widget.js)
  then embed on *any* site:

  <script src="https://cdn.example.com/chat-widget.js"
          data-backend="https://app.example.com"  // your Flask host
          data-stream="true"                       // optional: defaults true
          defer></script>

  The widget injects its own CSS + HTML and connects to
    {backend}/chat/stream   (SSE)
     {backend}/chat         (fallback JSON)

  It uses localStorage (key "aiw-prevID") to keep context
  across reloads and *does not* require cookies.

  All class names are prefixed with "aiw-" to minimise CSS clashes.
  Comments are in English, as requested.
*/
(() => {
  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 1. CONFIG â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  const scriptEl  = document.currentScript;
  const BACKEND   = (scriptEl.dataset.backend || '').replace(/\/$/, '');
  const USE_STREAM= scriptEl.dataset.stream !== 'false';
  const LS_KEY    = 'aiw-prevID';
  const COMPACT_W = 340;            // px
  const EXPANDED_W= 600;            // px
  const COMPACT_H = 420;            // px

  let prevID      = localStorage.getItem(LS_KEY) || null;
  let chatBusy    = false;

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 2. STYLES  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  const css = `/* Autoâ€‘generated by chatâ€‘widget.js */
  .aiw-launcher{animation:aiwPulse 2.8s infinite ease-in-out;position:fixed;bottom:24px;right:24px;background:#2563eb;color:#fff;border:none;border-radius:50%;width:56px;height:56px;font-size:24px;cursor:pointer;box-shadow:0 4px 10px rgba(0,0,0,.15);z-index:100000}
  @keyframes aiwPulse{0%{transform:rotate(0) scale(1);box-shadow:0 0 0 rgba(37,99,235,.4)}50%{transform:rotate(-5deg) scale(1.08);box-shadow:0 0 12px rgba(37,99,235,.6)}100%{transform:rotate(0) scale(1);box-shadow:0 0 0 rgba(37,99,235,.4)}}
  .aiw-box{position:fixed;bottom:90px;right:24px;display:none;flex-direction:column;height:80vh;width:${COMPACT_W}px;background:#fff;border:1px solid #ddd;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,.1);font-family:sans-serif;z-index:100000;overflow:hidden}
  .aiw-box header{display:flex;align-items:center;gap:12px;background:#2563eb;color:#fff;padding:0.75rem 1rem;font-weight:bold}
  .aiw-box .aiw-messages{flex:1;overflow-y:auto;min-height:0;padding:1rem;display:flex;flex-direction:column;gap:.75rem}
  .aiw-box footer{padding:.75rem 1rem;border-top:1px solid #eee;display:flex;gap:.5rem}
  .aiw-box textarea{flex:1;padding:.5rem;border:1px solid #ccc;border-radius:8px;resize:vertical}
  .aiw-box button.aiw-send{background:#2563eb;color:#fff;border:none;padding:.5rem 1rem;border-radius:8px;cursor:pointer}
  .aiw-msg{padding:.75rem;border-radius:10px;line-height:1.45;max-width:90%;white-space:pre-wrap;word-break:break-word}
  .aiw-user{background:#f3f4f6;color:#111827;margin-left:auto}
  .aiw-assistant{background:#dcfce7;color:#065f46;margin-right:auto}
  .aiw-assistant.aiw-typing{color:#065f46}
  .aiw-typing::after{content:".";animation:aiwDots 1.2s steps(3,end) infinite}
  @keyframes aiwDots{0%{content:"."}33%{content:".."}66%{content:"..."}}
  `;
  const styleTag = document.createElement('style');
  styleTag.textContent = css;
  document.head.appendChild(styleTag);

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 3. DOM  â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  // launcher
  const launcher = document.createElement('button');
  launcher.className = 'aiw-launcher';
  launcher.title = 'Chat';
  launcher.textContent = 'ðŸ’¬';
  document.body.appendChild(launcher);

  // chat box
  const box = document.createElement('div');
  box.className = 'aiw-box';
  box.innerHTML = `
    <header>AI Chat <button title="Expand" style="margin-left:auto;background:none;border:none;color:#fff;font-size:1.2rem;cursor:pointer">â›¶</button></header>
    <div class="aiw-messages"></div>
    <footer>
      <textarea rows="2" placeholder="Type your message..."></textarea>
      <button class="aiw-send">âž¤</button>
    </footer>`;
  document.body.appendChild(box);

  const expandBtn = box.querySelector('header button');
  const messages  = box.querySelector('.aiw-messages');
  const textarea  = box.querySelector('textarea');
  const sendBtn   = box.querySelector('.aiw-send');

  // welcome message
  addMessage('How can I assist you today?','aiw-assistant');

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ 4. HELPERS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  function sanitizeHTML(str){return str.replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi,'');}

  function addMessage(txt, cls){
    const d=document.createElement('div');
    d.className=`aiw-msg ${cls}`;
    d.innerHTML=sanitizeHTML(txt);
    messages.appendChild(d);
    messages.scrollTop=messages.scrollHeight;
    return d;
  }

  function startDots(el){el.classList.add('aiw-typing');}
  function stopDots(el){el.classList.remove('aiw-typing');}

  // collapse / expand
  expandBtn.addEventListener('click',()=>{
    if(box.offsetWidth===EXPANDED_W){ // collapse
      box.style.width=COMPACT_W+'px';
      box.style.height=COMPACT_H+'px';
      messages.style.maxHeight='300px';
    }else{ // expand
      box.style.display='flex';
      box.style.width=EXPANDED_W+'px';
      box.style.height='80vh';
      messages.style.maxHeight='';
    }
  });

  // launcher toggle
  launcher.addEventListener('click',()=>{
    box.style.display = box.style.display==='flex' ? 'none' : 'flex';
    textarea.disabled=false; sendBtn.disabled=false; textarea.focus();
  });

  // send handlers
  sendBtn.addEventListener('click', sendMessage);
  textarea.addEventListener('keydown',e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();sendMessage();}});

  async function sendMessage(){
    const msg=textarea.value.trim(); if(!msg||chatBusy) return;
    chatBusy=true; textarea.disabled=true; sendBtn.disabled=true;

    addMessage(msg,'aiw-user'); textarea.value='';
    const aiDiv=addMessage('', 'aiw-assistant'); startDots(aiDiv);

    const push=chunk=>{
      if(aiDiv.classList.contains('aiw-typing')){stopDots(aiDiv); aiDiv.innerHTML='';}
      aiDiv.innerHTML+=sanitizeHTML(chunk);
      messages.scrollTop=messages.scrollHeight;
    };

    try{
      if(USE_STREAM){
        const res=await fetch(`${BACKEND}/chat/stream`,{
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body:JSON.stringify({message:msg,previous_response_id:prevID}),
          credentials:'include'
        });
        if(!res.ok||!res.body) throw new Error('Network error');
        const rdr=res.body.getReader(); const dec=new TextDecoder(); let buf='';
        while(true){
          const {value,done}=await rdr.read(); if(done) break;
          buf+=dec.decode(value,{stream:true});
          const evts=buf.split('\n\n'); buf=evts.pop();
          for(const ev of evts){
            if(ev.startsWith('event: done')){rdr.cancel(); break;}
            if(ev.startsWith('event: meta')){const data=JSON.parse(ev.split('\n')[1].slice(6)); prevID=data.prev_id; localStorage.setItem(LS_KEY,prevID); continue;}
            const chunk=ev.split('\n').filter(l=>l.startsWith('data:')).map(l=>l.slice(6)).join('\n');
            if(chunk) push(chunk);
          }
        }
      }else{
        const res=await fetch(`${BACKEND}/chat`,{
          method:'POST', headers:{'Content-Type':'application/json'},
          body:JSON.stringify({message:msg,previous_response_id:prevID})
        });
        const d=await res.json(); stopDots(aiDiv);
        aiDiv.innerHTML=sanitizeHTML(d.response||d.error||'No response');
        if(d.prev_id){prevID=d.prev_id; localStorage.setItem(LS_KEY,prevID);}        
      }
    }catch(err){console.error(err); stopDots(aiDiv); aiDiv.textContent='Error contacting server';}
    finally{chatBusy=false; textarea.disabled=false; sendBtn.disabled=false; aiDiv.classList.remove('aiw-typing'); textarea.focus();}
  }
})();
